name: Deploy Flask to PythonAnywhere

# Only allow manual triggers
on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only run if triggered by the repository owner
    if: github.actor == github.repository_owner && startsWith(github.ref, 'refs/heads/release/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Deploy to PythonAnywhere
        env:
          PA_API_TOKEN: ${{ secrets.API_TOKEN }}
          PA_USERNAME: ${{ secrets.USERNAME }}
          # Use github.repository to extract just the repo name
          REPO_NAME: ${{ github.repository }}
        run: |
          # Install PythonAnywhere API client
          pip install pythonanywhere
          
          # Create deployment script
          cat > deploy.py << 'EOL'
          import os
          import requests
          import sys
          import time
          
          # Get environment variables
          username = os.environ.get('PA_USERNAME')
          api_token = os.environ.get('PA_API_TOKEN')
          repo_name = os.environ.get('REPO_NAME').split('/')[1]  # Extract repo name from full path
          
          if not all([username, api_token]):
              print("Error: Missing required environment variables")
              sys.exit(1)
          
          # API endpoints
          api_base = f"https://www.pythonanywhere.com/api/v0/user/{username}"
          
          # Headers for API requests
          headers = {
              'Authorization': f'Token {api_token}'
          }
          
          # Update files via git pull
          print("Pulling latest code from repository...")
          console_url = f"{api_base}/consoles/39261810/send_input/"
          
          # Command to change to project directory and pull latest code
          git_pull_command = (
              f"git pull && "
              f"cd ~/{repo_name} && "
              f"pip install -r app/requirements.txt"
              "\n"
          )
          
          # Send command to console
          response = requests.post(
              console_url,
              headers=headers,
              json={"input": git_pull_command}
          )
          
          if response.status_code != 200:
              print(f"Failed to execute git pull: {response.text}")
          
          # Reload web app
          print("Reloading web app...")
          webapp_url = f"{api_base}/webapps/{username}.pythonanywhere.com/reload/"
          response = requests.post(webapp_url, headers=headers)
          
          if response.status_code == 200:
              print("Successfully reloaded web app!")
          else:
              print(f"Failed to reload web app: {response.status_code}, {response.text}")
          EOL
          
          # Run the deployment script
          python deploy.py